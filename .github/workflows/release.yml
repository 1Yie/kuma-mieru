name: Create Release

on:
  push:
    paths:
      - "package.json"
      - ".github/workflows/release.yml"
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      discussions: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set environment variables
        id: env_vars
        run: |
          echo "repo_name=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
          echo "commit_url=${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/commit" >> $GITHUB_OUTPUT
          echo "profile_url=${GITHUB_SERVER_URL}" >> $GITHUB_OUTPUT

      - name: Get version from package.json
        id: package_version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          echo "previous_version=$(git show HEAD^:package.json | node -p "require(require('fs').readFileSync(0)).version")" >> $GITHUB_OUTPUT

      - name: Check version change
        id: version_check
        run: |
          if [ "${{ steps.package_version.outputs.version }}" != "${{ steps.package_version.outputs.previous_version }}" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate changelog
        if: steps.version_check.outputs.changed == 'true'
        id: changelog
        env:
          COMMIT_URL: ${{ steps.env_vars.outputs.commit_url }}
          PROFILE_URL: ${{ steps.env_vars.outputs.profile_url }}
        run: |
          CHANGELOG=""
          AUTHORS=""

          # Function to add emoji based on commit message
          add_emoji() {
            local msg="$1"
            local hash="$2"
            case "$msg" in
              *feat*|*特性*) echo "- ✨ [\`$msg\`]($COMMIT_URL/$hash)" ;;
              *fix*|*修复*) echo "- 🐛 [\`$msg\`]($COMMIT_URL/$hash)" ;;
              *docs*|*文档*) echo "- 📚 [\`$msg\`]($COMMIT_URL/$hash)" ;;
              *style*|*样式*) echo "- 💎 [\`$msg\`]($COMMIT_URL/$hash)" ;;
              *refactor*|*重构*) echo "- ♻️ [\`$msg\`]($COMMIT_URL/$hash)" ;;
              *perf*|*性能*) echo "- ⚡️ [\`$msg\`]($COMMIT_URL/$hash)" ;;
              *test*|*测试*) echo "- ✅ [\`$msg\`]($COMMIT_URL/$hash)" ;;
              *chore*|*构建*) echo "- 🔧 [\`$msg\`]($COMMIT_URL/$hash)" ;;
              *) echo "- 🔨 [\`$msg\`]($COMMIT_URL/$hash)" ;;
            esac
          }

          # Get all commits and authors since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          while IFS= read -r line; do
            HASH=$(echo "$line" | cut -f1)
            MSG=$(echo "$line" | cut -f2)
            CHANGELOG="$CHANGELOG$(add_emoji "$MSG" "$HASH")\n"
          done < <(git log --pretty=format:"%H%x09%s" $LAST_TAG..HEAD)

          # Get unique authors
          AUTHORS="\n\n## 👥 贡献者\n\n"
          while IFS= read -r author; do
            AUTHORS="$AUTHORS- [@$author]($PROFILE_URL/$author)\n"
          done < <(git log $LAST_TAG..HEAD --format="%aN" | sort -u)

          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG$AUTHORS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        if: steps.version_check.outputs.changed == 'true'
        uses: softprops/action-gh-release@v1
        env:
          VERSION: ${{ steps.package_version.outputs.version }}
          REPO_NAME: ${{ steps.env_vars.outputs.repo_name }}
        with:
          tag_name: v${{ env.VERSION }}
          name: 🚀 Release v${{ env.VERSION }}
          body: |
            ## 📝 更新日志

            ${{ steps.changelog.outputs.CHANGELOG }}

            ## 🐳 Docker 使用指南

            ### 使用 Docker 运行

            ```bash
            docker run -d \
              --name kuma-mieru \
              -e UPTIME_KUMA_BASE_URL=your_uptime_kuma_url \
              -e PAGE_ID=your_page_id \
              -p 3000:3000 \
              ghcr.io/${{ env.REPO_NAME }}:${{ env.VERSION }}
            ```

            ### 使用 Docker Compose

            修改 `docker-compose.yml` 文件中的镜像版本即可。

            ```yaml
            image: ghcr.io/${{ env.REPO_NAME }}:${{ env.VERSION }}
            ```

            ## ⚙️ 环境变量配置

            请确保配置以下必要的环境变量：
            - `UPTIME_KUMA_BASE_URL`: Uptime Kuma 实例的基础 URL
            - `PAGE_ID`: 状态页面 ID

            ## 🔄 更新指南

            ### Docker
            ```bash
            docker pull ghcr.io/${{ env.REPO_NAME }}:${{ env.VERSION }}
            docker stop kuma-mieru
            docker rm kuma-mieru
            # 然后使用上述 Docker 运行命令重新启动容器
            ```

            ### Docker Compose
            ```bash
            # 更新 docker-compose.yml 中的镜像版本
            docker-compose pull
            docker-compose up -d
            ```
          draft: false
          prerelease: false
          generate_release_notes: true
